/*
Copyright (c) 2015, Xenomorphales
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Aversive++ nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
#ifndef HDL_AVR_MEGA_XX0_1_EXT_FIELDS_HPP
#define HDL_AVR_MEGA_XX0_1_EXT_FIELDS_HPP

#include "regs.hpp"
#include <memory_mapping/memory_mapping.hpp>
#include <base/dummy.hpp>

#define AVERSIVE_DECLARE_FULL_GENERIC(f, grp, reg)		\
  using _##f##_GROUP = typename Defs::Groups:: grp;		\
  static constexpr auto _##f##_REG = Registers:: reg;

#define AVERSIVE_DECLARE_TEMPLATED_GENERIC(f)				\
  template<u8 f##_ID, DummyType _DUMMY = DUMMY_VALUE>			\
  struct f {								\
    static_assert(!f##_ID && f##_ID, "Invalid f##_ID");			\
  };									\

#define AVERSIVE_DECLARE_TEMPLATED_FULL_GENERIC(f, grp, reg)	\
  AVERSIVE_DECLARE_FULL_GENERIC(f, grp, reg);			\
  AVERSIVE_DECLARE_TEMPLATED_GENERIC(f);

#define AVERSIVE_DEFINE_TEMPLATED_FULL_GENERIC_2(f, suffix, id, type, grp, reg) \
  static constexpr type<grp, Defs:: f##suffix> f##suffix  = reg;	\
  template<DummyType _DUMMY> struct f<id, _DUMMY> {			\
    static constexpr auto& field = f##suffix;				\
  };

#define AVERSIVE_DEFINE_TEMPLATED_FULL_GENERIC_2_BITFIELD(f, suffix, id, type, grp, reg) \
  static constexpr type<grp, Defs:: f##suffix, reg.ADDRESS> f##suffix {};	\
  template<DummyType _DUMMY> struct f<id, _DUMMY> {			\
    static constexpr auto& field = f##suffix;				\
  };

#define AVERSIVE_DEFINE_TEMPLATED_FULL_GENERIC(f, suffix, id, type, grp, reg) \
  AVERSIVE_DEFINE_TEMPLATED_FULL_GENERIC_2(f, suffix, id, type, typename Defs::Groups:: grp, Registers:: reg);

#define AVERSIVE_DEFINE_TEMPLATED_FULL_GENERIC_BITFIELD(f, suffix, id, type, grp, reg) \
  AVERSIVE_DEFINE_TEMPLATED_FULL_GENERIC_2_BITFIELD(f, suffix, id, type, typename Defs::Groups:: grp, Registers:: reg);

#define AVERSIVE_DEFINE_TEMPLATED_GENERIC(f, suffix, id, type)		\
  AVERSIVE_DEFINE_TEMPLATED_FULL_GENERIC_2(f, suffix, id, type, _##f##_GROUP, _##f##_REG);

#define AVERSIVE_DEFINE_TEMPLATED_GENERIC_BITFIELD(f, suffix, id, type)		\
  AVERSIVE_DEFINE_TEMPLATED_FULL_GENERIC_2_BITFIELD(f, suffix, id, type, _##f##_GROUP, _##f##_REG);

#define AVERSIVE_DECLARE_TEMPLATED_FULL_BITFIELD(f, grp, reg)	\
  AVERSIVE_DECLARE_TEMPLATED_FULL_GENERIC(f, grp, reg);

#define AVERSIVE_DECLARE_TEMPLATED_BITFIELD(f)	\
  AVERSIVE_DECLARE_TEMPLATED_GENERIC(f);

#define AVERSIVE_DEFINE_TEMPLATED_BITFIELD(f, suffix, id)	\
  AVERSIVE_DEFINE_TEMPLATED_GENERIC_BITFIELD(f, suffix, id, BitField8);

#define AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(f, suffix, id, grp, reg)	\
  AVERSIVE_DEFINE_TEMPLATED_FULL_GENERIC_BITFIELD(f, suffix, id, BitField8, grp, reg);

#define AVERSIVE_DECLARE_TEMPLATED_FULL_FIELD(f, grp, reg)	\
  AVERSIVE_DECLARE_TEMPLATED_FULL_GENERIC(f, grp, reg);

#define AVERSIVE_DECLARE_TEMPLATED_FIELD(f)	\
  AVERSIVE_DECLARE_TEMPLATED_GENERIC(f);

#define AVERSIVE_DEFINE_TEMPLATED_FIELD(f, suffix, id)		\
  AVERSIVE_DEFINE_TEMPLATED_GENERIC(f, suffix, id, Field8);

#define AVERSIVE_DEFINE_TEMPLATED_FULL_FIELD(f, suffix, id, reg, grp)	\
  AVERSIVE_DEFINE_TEMPLATED_FULL_GENERIC(f, suffix, id, Field8, reg, grp);

namespace HDL {

  namespace ATMegaxx0_1 {

    namespace Private {

      namespace EXT {

	template<DummyType DUMMY = DUMMY_VALUE>
	struct EXT_ModuleFields {
	  using Defs = SimpleDefs::EXT_ModuleDefs;
	  using Registers = EXT_ModuleRegisters<>;

	  //! name PCIFR Register Bits
	  //! @{
	  AVERSIVE_DECLARE_TEMPLATED_FULL_BITFIELD(PCIF, PCIFR, PCIFR);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(PCIF, _0, 0);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(PCIF, _1, 1);
#if defined(__ATmegaxx0__)
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(PCIF, _2, 2);
#endif // __ATmegaxx0__
	  //! @}

	  //! name EIFR Register Bits
	  //! @{
	  AVERSIVE_DECLARE_TEMPLATED_FULL_BITFIELD(INTF, EIMSK, EIFR);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INTF, _0, 0);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INTF, _1, 1);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INTF, _2, 2);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INTF, _3, 3);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INTF, _4, 4);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INTF, _5, 5);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INTF, _6, 6);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INTF, _7, 7);
	  //! @}

	  //! name EIMSK Register Bits
	  //! @{
	  AVERSIVE_DECLARE_TEMPLATED_FULL_BITFIELD(INT, EIMSK, EIMSK);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INT, _0, 0);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INT, _1, 1);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INT, _2, 2);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INT, _3, 3);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INT, _4, 4);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INT, _5, 5);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INT, _6, 6);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(INT, _7, 7);
	  //! @}

	  //! name PCICR Register Bits
	  //! @{
	  AVERSIVE_DECLARE_TEMPLATED_FULL_BITFIELD(PCIE, PCICR, PCICR);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(PCIE, _0, 0);
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(PCIE, _1, 1);
#if defined(__ATmegaxx0__)
	  AVERSIVE_DEFINE_TEMPLATED_BITFIELD(PCIE, _2, 2);
#endif // __ATmegaxx0__
	  //! @}

	  //! \name EICR_A Register Bits
	  //! @{
	  AVERSIVE_DECLARE_TEMPLATED_FIELD(ISC);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_FIELD(ISC, _0, 0, EICR_A, EICR_A);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_FIELD(ISC, _1, 1, EICR_A, EICR_A);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_FIELD(ISC, _2, 2, EICR_A, EICR_A);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_FIELD(ISC, _3, 3, EICR_A, EICR_A);
	  //! @}

	  //! \name EICR_B Register Bits
	  //! @{
	  AVERSIVE_DEFINE_TEMPLATED_FULL_FIELD(ISC, _4, 4, EICR_B, EICR_B);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_FIELD(ISC, _5, 5, EICR_B, EICR_B);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_FIELD(ISC, _6, 6, EICR_B, EICR_B);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_FIELD(ISC, _7, 7, EICR_B, EICR_B);
	  //! @}

	  //! name PCMSK_0 Register Bits
	  //! @{
	  AVERSIVE_DECLARE_TEMPLATED_BITFIELD(PCINT);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _0, 0, PCMSK_0, PCMSK_0);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _1, 1, PCMSK_0, PCMSK_0);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _2, 2, PCMSK_0, PCMSK_0);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _3, 3, PCMSK_0, PCMSK_0);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _4, 4, PCMSK_0, PCMSK_0);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _5, 5, PCMSK_0, PCMSK_0);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _6, 6, PCMSK_0, PCMSK_0);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _7, 7, PCMSK_0, PCMSK_0);
	  //! @}

	  //! name PCMSK_1 Register Bits
	  //! @{
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _8, 8, PCMSK_1, PCMSK_1);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _9, 9, PCMSK_1, PCMSK_1);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _10, 10, PCMSK_1, PCMSK_1);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _11, 11, PCMSK_1, PCMSK_1);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _12, 12, PCMSK_1, PCMSK_1);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _13, 13, PCMSK_1, PCMSK_1);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _14, 14, PCMSK_1, PCMSK_1);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _15, 15, PCMSK_1, PCMSK_1);
	  //! @}

#if defined(__ATmegaxx0__)
	  //! name PCMSK_2 Register Bits
	  //! @{
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _16, 16, PCMSK_2, PCMSK_2);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _17, 17, PCMSK_2, PCMSK_2);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _18, 18, PCMSK_2, PCMSK_2);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _19, 19, PCMSK_2, PCMSK_2);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _20, 20, PCMSK_2, PCMSK_2);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _21, 21, PCMSK_2, PCMSK_2);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _22, 22, PCMSK_2, PCMSK_2);
	  AVERSIVE_DEFINE_TEMPLATED_FULL_BITFIELD(PCINT, _23, 23, PCMSK_2, PCMSK_2);
#endif // __ATmegaxx0__
	  //! @}
	};

      }
    }
  }
}

#endif//HDL_AVR_MEGA_XX0_1_EXT_FIELDS_HPP
